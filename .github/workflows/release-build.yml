name: "Release Build & Push"
on:
  push:
    branches: [main]
    paths-ignore: ['docs/**', 'images/**', '.gitignore', 'LICENSE', '*.md']
  workflow_dispatch:
    inputs:
      force: { type: boolean, default: false, description: "Run even if no bump detected" }

concurrency:
  group: "release-build-${{ github.ref_name }}"
  cancel-in-progress: false

jobs:
  plan:
    name: "Plan"
    permissions: { contents: read }
    runs-on: ubuntu-latest
    outputs:
      reltype: ${{ steps.vars.outputs.reltype }}  # type of release (or none)
      itag:    ${{ steps.vars.outputs.itag }}     # name of the tag to create
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0    # ensure that previous
          fetch-tags: true  #  tags are included.

      - name: "Determine variable values"
        id:   vars
        shell: bash
        run: |
          set -eu  # note: following script doesn't work if `set -o pipefail`
          PREVTAG="$(git describe --tags --abbrev=0 --match "v[0-9]*" 2>/dev/null || echo v0.0.0)"
          if git rev-parse -q --verify "$PREVTAG" >/dev/null 2>&1; then COMMITS="${PREVTAG}..HEAD"; else COMMITS="HEAD"; fi
          BUMP=none
          if   (git log --no-merges --format=%s "$COMMITS" | grep -Eqm1 '^[a-z]+(\([^)]+\))?!:'); then BUMP=major
          elif (git log --no-merges --format=%B "$COMMITS" | grep -Fqm1 'BREAKING CHANGE:'); then BUMP=major
          elif (git log --no-merges --format=%s "$COMMITS" | grep -Eqm1 '^feat(\([^)]+\))?:'); then BUMP=minor
          elif (git log --no-merges --format=%s "$COMMITS" | grep -Eqm1 '^(bug)?fix(\([^)]+\))?:'); then BUMP=patch
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ inputs.force }}" == "true" ]]; then BUMP=patch
          fi
          if [[ "$PREVTAG" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            MAJOR=${BASH_REMATCH[1]}; MINOR=${BASH_REMATCH[2]}; PATCH=${BASH_REMATCH[3]}
          else
            echo "Unrecognised last tag \"$PREVTAG\", using v0.0.0" >&2
            MAJOR=0; MINOR=0; PATCH=0
          fi
          case "$BUMP" in
            major) MAJOR=$((MAJOR+1)); MINOR=0; PATCH=0 ;;
            minor) MINOR=$((MINOR+1)); PATCH=0 ;;
            patch) PATCH=$((PATCH+1)) ;;
            none)  ;;
          esac
          NEXTTAG=""; if [[ "$BUMP" != "none" ]]; then NEXTTAG="v${MAJOR}.${MINOR}.${PATCH}"; fi
          echo "- github.event_name=${{ github.event_name }}"
          echo "- github.ref_name=${{ github.ref_name }}"
          echo "- outputs.itag=$NEXTTAG"
          echo "- outputs.reltype=$BUMP"
          echo "itag=$NEXTTAG" >> "$GITHUB_OUTPUT"
          echo "reltype=$BUMP" >> "$GITHUB_OUTPUT"

  source:
    name: "Source scan"
    needs: [plan]
    runs-on: ubuntu-latest
    permissions: { contents: read }
    steps:
      - uses: actions/checkout@v5

      - run: |
          ### Check the Helm chart lints OK
          helm lint ./helm_deploy/data-access-service --quiet --strict

  build:
    name: "Build OCI images"
    needs: [plan]
    if: ${{ needs.plan.outputs.reltype != 'none' }}
    runs-on: ubuntu-latest
    permissions: { contents: write, id-token: write, packages: read }
    steps:
      - uses: actions/checkout@v5

      - name: "Set up Java 21 (Temurin distro)"
        uses: actions/setup-java@v5
        with:
          distribution: "temurin"
          java-version: "21"

      - name: "Set up Gradle"
        uses: gradle/actions/setup-gradle@v5

      - name: "Build and test app"
        shell: bash
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          ./gradlew clean build integrationTest

      - name: "Upload Checkstyle report for data-access-service"
        uses: actions/upload-artifact@v4
        with:
          name: checkstyle-report
          path: data-access-service/build/reports/checkstyle
          retention-days: 7

      - name: "Upload test report for data-access-service"
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: data-access-service/build/reports/tests
          retention-days: 7

      - name: "Authenticate with Amazon ECR"
        id:   ecr-auth
        uses: ./.github/actions/cp-ecr-auth
        with:
          ecr-region:         "${{ vars.ECR_REGION }}"
          ecr-role-to-assume: "${{ secrets.ECR_ROLE_TO_ASSUME }}"

      - name: "Build and push image"
        uses: ./.github/actions/build-push-image
        with:
          image: "${{ steps.ecr-auth.outputs.ecr-registry }}/${{ vars.ECR_REPOSITORY }}"
          itag:  "${{ needs.plan.outputs.itag }}"

      - name: "Create Git tag"
        env:
          TAG:      ${{ needs.plan.outputs.itag }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git tag -a "$TAG" -m "Release $TAG"
          git push origin "$TAG"

      - name: "Create GitHub Release"
        env:
          GH_TOKEN: ${{ github.token }}
          TAG:      ${{ needs.plan.outputs.itag }}
        run: |
          gh release create "$TAG" --verify-tag --title "$TAG" --generate-notes

      - name: "Send failure Slack message"
        if:   ${{ failure() }}
        shell: bash
        run: |
          set -euo pipefail
          RUN_URL="https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
          MESSAGE=" :github-failure:  Failed to build release ${{ needs.plan.outputs.itag }}. View run log at ${RUN_URL}"
          curl -X POST -H "Content-Type: application/json" --data "{\"text\": \"${MESSAGE}\"}" "${{ secrets.SLACK_WEBHOOK }}"

      - name: "Check deploy"
        shell: bash
        run: |
          echo "call-deploy:"
          echo "  if:   ${{ needs.plan.outputs.bump != 'none' }}"
          echo "  with:"
          echo "    tag:     ${{ needs.plan.outputs.itag }}"
          echo "    uat:     true"
          echo "    staging: true"
          echo "    prod:    false"

  call-deploy:
    name: "Call deploy"
    if:   ${{ needs.plan.outputs.bump != 'none' }}
    needs: [plan, source, build]
    permissions: { contents: read, id-token: write }
    uses: ./.github/workflows/release-deploy.yml
    with:
      tag:     "${{ needs.plan.outputs.itag }}"
      uat:     "true"
      staging: "true"
      prod:    "false"
    secrets: inherit
