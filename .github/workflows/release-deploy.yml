name: "Release Deploy"

on:
  workflow_call:
    inputs:
      tag:     { type: string,  required: true }
      uat:     { type: string,  required: true }
      staging: { type: string,  required: true }
      prod:    { type: string,  required: true }
  workflow_dispatch:
    inputs:
      tag:     { type: string,  required: true,  description: "Tag name (e.g., 'v1.0.4')"}
      uat:     { type: boolean, default:  false, description: "Deploy to uat" }
      staging: { type: boolean, default:  false, description: "Deploy to staging" }
      prod:    { type: boolean, default:  false, description: "Deploy to prod" }

concurrency:
  group: "release-deploy-${{ github.ref_name }}"
  cancel-in-progress: true

jobs:
  plan:
    name: "Plan"
    permissions: { contents: read }
    runs-on: ubuntu-latest
    steps:
      - name: "Determine variable values"
        id:   vars
        shell: bash
        run: |
          set -euo pipefail
          echo "- github.event_name=${{ github.event_name }}"
          echo "- github.ref_name=${{ github.ref_name }}"
          echo "- inputs.tag=${{ inputs.tag }}"
          echo "- inputs.uat=${{ inputs.uat }}"
          echo "- inputs.staging=${{ inputs.staging }}"
          echo "- inputs.prod=${{ inputs.prod }}"
          PATTERN='^v[0-9]+\.[0-9]+\.[0-9]+$'
          TAG='${{ inputs.tag }}'
          if [[ ! "$TAG" =~ $PATTERN ]]; then
            echo "Tag name does not have expected pattern"
            exit 1
          fi

  deploy-uat:
    name: "Deploy ${{ inputs.tag }} to uat"
    if:   ${{ inputs.uat == true || inputs.uat == 'true' }}
    needs: [plan]
    runs-on: ubuntu-latest
    permissions: { contents: read, id-token: write }
    environment:
      name: uat
      url:  "https://laa-data-access-api-uat.apps.cloud-platform.service.justice.gov.uk"
    steps:
      - uses: actions/checkout@v5

      - name: "Authenticate with Amazon ECR"  # to get ecr-registry
        id:   ecr-auth
        uses: ./.github/actions/cp-ecr-auth
        with:
          ecr-region:         "${{ vars.ECR_REGION }}"
          ecr-role-to-assume: "${{ secrets.ECR_ROLE_TO_ASSUME }}"

      - name: "Authenticate with Kubernetes cluster"
        uses: ./.github/actions/cp-kube-auth
        with:
          kube-cert:      "${{ secrets.UBE_CERT }}"
          kube-cluster:   "${{ secrets.KUBE_CLUSTER }}"
          kube-namespace: "${{ secrets.KUBE_NAMESPACE }}"
          kube-token:     "${{ secrets.KUBE_TOKEN }}"

      - name: "Install release app"
        uses: ./.github/actions/release-install
        with:
          image: "${{ steps.ecr-auth.outputs.ecr-registry }}/${{ vars.ECR_REPOSITORY }}"
          tag:   "${{ inputs.tag }}"
          environmentSuffix: "uat"

  deploy-staging:
    name: "Deploy ${{ inputs.tag }} to staging"
    if:   ${{ always() && (inputs.staging == true || inputs.staging == 'true')
           && (needs.deploy-uat.result == 'success' || needs.deploy-uat.result == 'skipped') }}
    needs: [plan, deploy-uat]   # ordered after UAT
    runs-on: ubuntu-latest
    permissions: { contents: read, id-token: write }
    environment:
      name: staging
      url:  "https://laa-data-access-api-staging.apps.cloud-platform.service.justice.gov.uk"
    steps:
      - uses: actions/checkout@v5

      - name: "Authenticate with Amazon ECR"  # to get ecr-registry
        id:   ecr-auth
        uses: ./.github/actions/cp-ecr-auth
        with:
          ecr-region:         "${{ vars.ECR_REGION }}"
          ecr-role-to-assume: "${{ secrets.ECR_ROLE_TO_ASSUME }}"

      - name: "Authenticate with Kubernetes cluster"
        uses: ./.github/actions/cp-kube-auth
        with:
          kube-cert:      "${{ secrets.KUBE_CERT }}"
          kube-cluster:   "${{ secrets.KUBE_CLUSTER }}"
          kube-namespace: "${{ secrets.KUBE_NAMESPACE }}"
          kube-token:     "${{ secrets.KUBE_TOKEN }}"

      - name: "Install release app"
        uses: ./.github/actions/release-install
        with:
          image: "${{ steps.ecr-auth.outputs.ecr-registry }}/${{ vars.ECR_REPOSITORY }}"
          tag:   "${{ inputs.tag }}"
          environmentSuffix: "staging"

  deploy-prod:
    name: "Deploy ${{ inputs.tag }} to prod"
    if:   ${{ always() && (inputs.prod == true || inputs.prod == 'true')
           && (needs.deploy-staging.result == 'success' || needs.deploy-staging.result == 'skipped') }}
    needs: [plan, deploy-staging]   # ordered after staging
    runs-on: ubuntu-latest
    permissions: { contents: read, id-token: write }
    environment:
      name: prod
      url:  "https://laa-data-access-api-prod.apps.cloud-platform.service.justice.gov.uk"
    steps:
      - uses: actions/checkout@v5

      - name: "Authenticate with Amazon ECR"  # to get ecr-registry
        id:   ecr-auth
        uses: ./.github/actions/cp-ecr-auth
        with:
          ecr-region:         "${{ vars.ECR_REGION }}"
          ecr-role-to-assume: "${{ secrets.ECR_ROLE_TO_ASSUME }}"

      - name: "Authenticate with Kubernetes cluster"
        uses: ./.github/actions/cp-kube-auth
        with:
          kube-cert:      "${{ secrets.KUBE_CERT }}"
          kube-cluster:   "${{ secrets.KUBE_CLUSTER }}"
          kube-namespace: "${{ secrets.KUBE_NAMESPACE }}"
          kube-token:     "${{ secrets.KUBE_TOKEN }}"

      - name: "Install release app"
        uses: ./.github/actions/release-install
        with:
          image: "${{ steps.ecr-auth.outputs.ecr-registry }}/${{ vars.ECR_REPOSITORY }}"
          tag:   "${{ inputs.tag }}"
          environmentSuffix: "prod"
