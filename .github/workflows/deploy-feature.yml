name: Deploy feature

on:
  push:
    branches:
      - 'feature-dev/**'
      - 'feature-uat/**'

permissions:
  contents: read

jobs:
  define-feature-version:
    runs-on: ubuntu-latest
    outputs:
      feature_version: ${{ steps.get-feature-version.outputs.feature_version }}
    steps:
      - uses: actions/checkout@v5
      - uses: ministryofjustice/laa-ccms-common-workflows/.github/actions/remove-prefix@v1
        id: get-feature-name
        with:
          string: ${{ github.ref_name }}
          prefix: 'feature-*/'
      - name: Get feature version
        id: get-feature-version
        run: |
          COMMIT_HASH=$(git rev-parse --short HEAD)
          echo "feature_version=${{ steps.get-feature-name.outputs.result }}-${COMMIT_HASH}-SNAPSHOT" >> $GITHUB_OUTPUT
          echo "Feature version: ${{ steps.get-feature-name.outputs.result }}-${COMMIT_HASH}-SNAPSHOT"

  build-and-publish-snapshot:
    needs: [ define-feature-version ]
    uses: ministryofjustice/laa-ccms-common-workflows/.github/workflows/gradle-build-and-publish.yml@v1
    permissions:
      contents: write
      packages: write
    with:
      integration_test_task: "integrationTest --tests '*IntegrationTest'"
      publish_package: 'true'
      override_version: ${{ needs.define-feature-version.outputs.feature_version }}
      junit_results_path: 'data-access-service/build/test-results'
      junit_report_path: 'data-access-service/build/reports/tests'
      checkstyle_report_path: 'data-access-service/build/reports/checkstyle'
      jacoco_coverage_report: 'false'
      jacoco_coverage_report_path: 'data-access-service/build/reports/jacoco'
    secrets:
      gh_token: ${{ secrets.GITHUB_TOKEN }}

  ecr-publish-image:
    needs: [ build-and-publish-snapshot ]
    uses: ministryofjustice/laa-ccms-common-workflows/.github/workflows/ecr-publish-image.yml@v1
    permissions:
      contents: read
      id-token: write
    with:
      image_version: ${{ format('{0}-{1}', vars.IMAGE_PREFIX, needs.build-and-publish-snapshot.outputs.published_artifact_version) }}
      jar_subproject: 'data-access-service'
    secrets:
      gh_token: ${{ secrets.GITHUB_TOKEN }}
      ecr_repository: ${{ vars.ECR_REPOSITORY }}
      ecr_region: ${{ vars.ECR_REGION }}
      ecr_role_to_assume: ${{ secrets.ECR_ROLE_TO_ASSUME }}

  deploy-uat:
    if: ${{ !contains(github.actor, '[bot]') }}
    needs: [ ecr-publish-image ]
    environment: uat
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5.0.0

      - name: Deploy to UAT
        uses: ./.github/actions/deploy
        with:
          ecr-repository: ${{ vars.ECR_REPOSITORY }}
          ecr-registry_url: ${{ secrets.ECR_REGISTRY_URL }}
          auth_directory_url: ${{ secrets.AUTH_DIRECTORY_URL }}
          auth_client_id: ${{ secrets.AUTH_CLIENT_ID }}
          auth_client_secret: ${{ secrets.AUTH_CLIENT_SECRET }}
          kube-cert: ${{ secrets.KUBE_CERT }}
          kube-token: ${{ secrets.KUBE_TOKEN }}
          kube-cluster: ${{ secrets.KUBE_CLUSTER }}
          kube-namespace: ${{ secrets.KUBE_NAMESPACE }}
          data_store_base_url: ${{ secrets.DATA_STORE_BASE_URL }}
          app-environment: uat
          session_secret: ${{ secrets.SESSION_SECRET }}
          service_name: ${{ vars.SERVICE_NAME }}
          service_phase: ${{ vars.SERVICE_PHASE }}
          department_name: ${{ vars.DEPARTMENT_NAME }}
          department_url: ${{ vars.DEPARTMENT_URL }}
          contact_email: ${{ vars.CONTACT_EMAIL }}
          service_url: ${{ vars.SERVICE_URL }}
          session_name: ${{ vars.SESSION_NAME}}
          ratelimit_headers_enabled: ${{ vars.RATELIMIT_HEADERS_ENABLED }}
          ratelimit_storage_uri: ${{ vars.RATELIMIT_STORAGE_URI }}
          ratelimit_max: ${{ vars.RATE_LIMIT_MAX }}
          ratewindow_ms: ${{ vars.RATE_WINDOW_MS }}